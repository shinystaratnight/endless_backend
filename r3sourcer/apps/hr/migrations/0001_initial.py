# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-11-03 07:30
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import r3sourcer.apps.core.mixins
import r3sourcer.apps.core.models.core
import r3sourcer.apps.hr.models
import r3sourcer.apps.hr.utils.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_auto_20171102_1757'),
        ('sms_interface', '0001_initial'),
        ('skills', '0001_initial'),
        ('candidate', '0001_initial'),
        ('pricing', '0001_initial'),
        ('filer', '0007_auto_20161016_1055'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlackList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blacklists', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blacklists', to='core.Company', verbose_name='Company')),
                ('company_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='blacklists', to='core.CompanyContact', verbose_name='Company Contact')),
            ],
            options={
                'verbose_name': 'Black list',
                'verbose_name_plural': 'Black lists',
            },
        ),
        migrations.CreateModel(
            name='CandidateEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('evaluated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Evaluated at')),
                ('level_of_communication', models.PositiveSmallIntegerField(choices=[(0, 'Not Rated'), (1, 'Impossible'), (2, 'Hard'), (3, 'Decent'), (4, 'Good'), (5, 'Excellent')], default=0, verbose_name='Level of Communication')),
                ('was_on_time', models.NullBooleanField(verbose_name='Was on time?')),
                ('was_motivated', models.NullBooleanField(verbose_name='Was motivated?')),
                ('had_ppe_and_tickets', models.NullBooleanField(verbose_name='Had PPE and tickets?')),
                ('met_expectations', models.NullBooleanField(verbose_name='Met Your expectations?')),
                ('representation', models.NullBooleanField(verbose_name='Was clean, well presented?')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_evaluations', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
            ],
            options={
                'verbose_name': 'Candidate Evaluation',
                'verbose_name_plural': 'Candidate Evaluations',
            },
        ),
        migrations.CreateModel(
            name='CandidateScore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('client_feedback', models.DecimalField(decimal_places=2, max_digits=3, null=True, verbose_name='Client Feedback')),
                ('reliability', models.DecimalField(decimal_places=2, max_digits=3, null=True, verbose_name='Reliability')),
                ('loyalty', models.DecimalField(decimal_places=2, max_digits=3, null=True, verbose_name='Loyalty')),
                ('recruitment_score', models.DecimalField(decimal_places=2, max_digits=3, null=True, verbose_name='Recruitment Score')),
                ('candidate_contact', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidate_scores', to='candidate.CandidateContact', verbose_name='Candidate Scores')),
            ],
            options={
                'verbose_name': 'Candidate Score',
                'verbose_name_plural': "Candidates' Scores",
            },
        ),
        migrations.CreateModel(
            name='CarrierList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('target_date', models.DateField(default=r3sourcer.apps.hr.utils.utils.tomorrow, verbose_name='Target Date')),
                ('confirmed_available', models.BooleanField(default=False, verbose_name='Confirmed Available')),
                ('sms_sending_scheduled_at', models.DateTimeField(blank=True, null=True, verbose_name='SMS sending scheduled at')),
                ('candidate_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='carrier_lists', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
            ],
            options={
                'verbose_name': 'Carrier List',
                'verbose_name_plural': 'Carrier Lists',
            },
        ),
        migrations.CreateModel(
            name='ContactJobsiteDistanceCache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('distance', models.CharField(max_length=10)),
                ('time', models.CharField(blank=True, max_length=10, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distance_caches', to='core.Contact', verbose_name='Contact')),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favouritelists', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='favouritelists', to='core.Company', verbose_name='Company')),
                ('company_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favouritelist', to='core.CompanyContact', verbose_name='Favourite list owner')),
            ],
            options={
                'verbose_name': 'Favourite list',
                'verbose_name_plural': 'Favourite lists',
            },
        ),
        migrations.CreateModel(
            name='Jobsite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('is_available', models.BooleanField(default=True, verbose_name='Available')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('files', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobsites', to='filer.Folder')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsites', to='pricing.Industry', verbose_name='Industry')),
                ('master_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsites', to='core.Company', verbose_name='Master company')),
                ('portfolio_manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='managed_jobsites', to='core.CompanyContact', verbose_name='Portfolio Manager')),
                ('primary_contact', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobsites', to='core.CompanyContact', verbose_name='Primary Contact')),
            ],
            options={
                'verbose_name': 'Jobsite',
                'verbose_name_plural': 'Jobsites',
            },
            bases=(r3sourcer.apps.core.mixins.CategoryFolderMixin, r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model),
        ),
        migrations.CreateModel(
            name='JobsiteAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsite_addresses', to='core.Address', verbose_name='Address')),
                ('jobsite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsite_addresses', to='hr.Jobsite', verbose_name='Jobsite')),
                ('regular_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsite_addresses', to='core.Company', verbose_name='Regular company')),
            ],
            options={
                'verbose_name': 'Jobsite Address',
                'verbose_name_plural': 'Jobsite Addresses',
            },
        ),
        migrations.CreateModel(
            name='JobsiteUnavailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('unavailable_from', models.DateField(blank=True, null=True, verbose_name='From')),
                ('unavailable_until', models.DateField(blank=True, null=True, verbose_name='Until')),
                ('notes', models.TextField(blank=True, help_text='Unavailability Description', verbose_name='Notes')),
                ('jobsite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobsite_unavailabilities', to='hr.Jobsite', verbose_name='Jobsite')),
            ],
            options={
                'verbose_name': 'Jobsite Unavailability',
                'verbose_name_plural': 'Jobsite Unavailabilities',
            },
        ),
        migrations.CreateModel(
            name='Payslip',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Payment Date')),
                ('annual_salary', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Annual salary')),
                ('from_date', models.DateField(verbose_name='From Date')),
                ('to_date', models.DateField(verbose_name='To Date')),
                ('cheque_number', models.TextField(verbose_name='Cheque number')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payslips', to='candidate.CandidateContact', verbose_name='Candidate contact')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payslips', to='core.Company', verbose_name='Company')),
                ('hourly_rate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payslips', to='skills.SkillBaseRate', verbose_name='Hourly rate')),
            ],
            options={
                'verbose_name': 'Payslip',
                'verbose_name_plural': 'Payslips',
            },
        ),
        migrations.CreateModel(
            name='PayslipLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('hours', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Hours')),
                ('calc_rate', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Calc. Rate')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Amount')),
                ('ytd', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='YTD')),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Wages'), (1, 'Tax'), (2, 'Superannuation Expenses')], verbose_name='Type')),
                ('payslip', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payslip_lines', to='hr.Payslip', verbose_name='Payslip')),
            ],
            options={
                'verbose_name': 'Payslip Line',
                'verbose_name_plural': 'Payslip Lines',
            },
        ),
        migrations.CreateModel(
            name='PayslipRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('period', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly'), ('monthly', 'Monthly'), ('daily', 'Daily'), ('prepay', 'Prepay')], default='weekly', max_length=11, verbose_name='Period')),
                ('period_zero_reference', models.IntegerField(default=1, verbose_name='Period zero reference')),
                ('starting_number', models.IntegerField(default=1, verbose_name='Starting number')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payslip_rules', to='core.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Payslip Rule',
                'verbose_name_plural': 'Payslip Rules',
            },
        ),
        migrations.CreateModel(
            name='PersonalIncomeTax',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('period', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly'), ('monthly', 'Monthly'), ('daily', 'Daily')], default='weekly', max_length=11, verbose_name='Period')),
                ('rule', models.CharField(max_length=255, verbose_name='Rule')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('country', models.ForeignKey(default='AU', on_delete=django.db.models.deletion.CASCADE, to='core.Country', to_field='code2')),
            ],
            options={
                'verbose_name': 'Personal Income Tax',
                'verbose_name_plural': 'Personal Income Taxes',
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('time', models.TimeField(verbose_name='Time')),
            ],
            options={
                'verbose_name': 'Shift',
                'verbose_name_plural': 'Shifts',
            },
        ),
        migrations.CreateModel(
            name='SocialInsurance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(default='Superannuation', max_length=64, verbose_name='Name')),
                ('threshold', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Threshold')),
                ('rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Rate')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('age_threshold', models.IntegerField(default=18, null=True, verbose_name='Age threshold')),
                ('country', models.ForeignKey(default='AU', on_delete=django.db.models.deletion.CASCADE, to='core.Country', to_field='code2')),
            ],
            options={
                'verbose_name': 'Social Insurance',
                'verbose_name_plural': 'Social Insurances',
            },
        ),
        migrations.CreateModel(
            name='TimeSheet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('going_to_work_confirmation', models.NullBooleanField(verbose_name='Going to Work')),
                ('shift_started_at', models.DateTimeField(blank=True, default=r3sourcer.apps.hr.utils.utils.today_7_am, null=True, verbose_name='Shift Started at')),
                ('break_started_at', models.DateTimeField(blank=True, default=r3sourcer.apps.hr.utils.utils.today_12_pm, null=True, verbose_name='Break Started at')),
                ('break_ended_at', models.DateTimeField(blank=True, default=r3sourcer.apps.hr.utils.utils.today_12_30_pm, null=True, verbose_name='Break Ended at')),
                ('shift_ended_at', models.DateTimeField(blank=True, default=r3sourcer.apps.hr.utils.utils.today_3_30_pm, null=True, verbose_name='Shift Ended at')),
                ('supervisor_signature', models.ImageField(blank=True, null=True, upload_to=r3sourcer.apps.hr.models.TimeSheet.supervisor_signature_path, verbose_name='Supervisor signature')),
                ('candidate_submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Candidate Submitted at')),
                ('supervisor_approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Supervisor Approved at')),
                ('supervisor_approved_scheme', models.CharField(choices=[('PIN', 'PIN'), ('SIGNATURE', 'Signature')], default='', editable=False, max_length=16, verbose_name='Supervisor Approved scheme')),
                ('rate_overrides_approved_at', models.DateField(blank=True, null=True, verbose_name='Candidate and Client Rate Overrides Approved at')),
                ('candidate_rate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timesheets', to='skills.SkillBaseRate', verbose_name='Candidate Rate Override')),
                ('going_to_work_reply_sms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='time_sheets_going_to_work_reply', to='sms_interface.SMSMessage', verbose_name='Going to Work Reply SMS')),
                ('going_to_work_sent_sms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='time_sheets_going_to_work', to='sms_interface.SMSMessage', verbose_name='Going to Work Sent SMS')),
                ('rate_overrides_approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timesheet_rate_override_approvals', to='core.CompanyContact', verbose_name='Candidate and Client Rate Overrides Approved by')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='supervised_time_sheets', to='core.CompanyContact', verbose_name='Supervisor')),
            ],
            options={
                'verbose_name': 'Timesheet Entry',
                'verbose_name_plural': 'Timesheet Entries',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TimeSheetIssue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('description', models.TextField(verbose_name='Description')),
                ('supervisor_approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Supervisor Approved at')),
                ('account_representative', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timesheet_issues', to='core.CompanyContact', verbose_name='Account Contact Responsible')),
                ('supervisor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='supervised_timesheet_issues', to='core.CompanyContact', verbose_name='Supervisor')),
                ('time_sheet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='timesheet_issues', to='hr.TimeSheet', verbose_name='TimeSheet')),
            ],
            options={
                'verbose_name': 'Timesheet Issue',
                'verbose_name_plural': 'Timesheet Issues',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('customer_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.customer_signature_path, verbose_name='Customer signature')),
                ('provider_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.provider_signature_path, verbose_name='Provider signature')),
                ('customer_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Customer signed at')),
                ('provider_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Provider signed at')),
                ('published', models.BooleanField(default=False, verbose_name='Published')),
                ('publish_on', models.DateField(blank=True, null=True, verbose_name='To be published on')),
                ('expires_on', models.DateField(blank=True, null=True, verbose_name='Expires on')),
                ('work_start_date', models.DateField(default=datetime.date.today, verbose_name='Work Start Date')),
                ('workers', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Workers')),
                ('default_shift_starting_time', models.TimeField(default=datetime.time(7, 0), verbose_name='Default Shift Starting Time')),
                ('notes', models.TextField(blank=True, help_text='Vacancy Description', verbose_name='Notes')),
                ('transportation_to_work', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Own Car'), (2, 'Public Transportation')], null=True, verbose_name='Transportation to Work')),
                ('customer_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_vacancys', to='core.Company', verbose_name='Customer Company')),
                ('customer_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_representative_vacancys', to='core.CompanyContact', verbose_name='Customer Representative')),
                ('hourly_rate_default', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vacancies', to='skills.SkillBaseRate', verbose_name='Hourly rate default')),
                ('jobsite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vacancies', to='hr.Jobsite', verbose_name='Jobsite')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vacancies', to='skills.Skill', verbose_name='Category')),
                ('provider_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='provider_vacancys', to='core.Company', verbose_name='Provider Company')),
                ('provider_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='provider_representative_vacancys', to='core.CompanyContact', verbose_name='Provider Representative')),
            ],
            options={
                'verbose_name': 'Vacancy',
                'verbose_name_plural': 'Vacancies',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='VacancyDate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('shift_date', models.DateField(verbose_name='Shift date')),
                ('workers', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Workers')),
                ('cancelled', models.BooleanField(default=False)),
                ('hourly_rate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vacancy_dates', to='skills.SkillBaseRate', verbose_name='Hourly rate')),
                ('vacancy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vacancy_dates', to='hr.Vacancy', verbose_name='Vacancy')),
            ],
            options={
                'verbose_name': 'Vacancy Date',
                'verbose_name_plural': 'Vacancy dates',
            },
        ),
        migrations.CreateModel(
            name='VacancyOffer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Undefined'), (1, 'Accepted'), (2, 'Cancelled')], default=0, verbose_name='Status')),
                ('scheduled_sms_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Scheduled date')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vacancy_offers', to='candidate.CandidateContact', verbose_name='Candidate contact')),
                ('offer_sent_by_sms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vacancy_offers', to='sms_interface.SMSMessage', verbose_name='Offer sent by sms')),
                ('reply_received_by_sms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reply_vacancy_offers', to='sms_interface.SMSMessage', verbose_name='Reply received by sms')),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vacancy_offers', to='hr.Shift', verbose_name='Shift')),
            ],
            options={
                'verbose_name': 'Vacancy offer',
                'verbose_name_plural': 'Vacancy offers',
            },
        ),
        migrations.AddField(
            model_name='timesheet',
            name='vacancy_offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_sheets', to='hr.VacancyOffer', verbose_name='Vacancy Offer'),
        ),
        migrations.AddField(
            model_name='shift',
            name='date',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vacancy_dates', to='hr.VacancyDate', verbose_name='Date'),
        ),
        migrations.AddField(
            model_name='favouritelist',
            name='jobsite',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favouritelists', to='hr.Jobsite', verbose_name='Jobsite'),
        ),
        migrations.AddField(
            model_name='favouritelist',
            name='vacancy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favouritelists', to='hr.Vacancy', verbose_name='Vacancy'),
        ),
        migrations.AddField(
            model_name='contactjobsitedistancecache',
            name='jobsite',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distance_caches', to='hr.Jobsite', verbose_name='Jobsite'),
        ),
        migrations.AddField(
            model_name='carrierlist',
            name='referral_vacancy_offer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referral_carrier_lists', to='hr.VacancyOffer', verbose_name='Referral Vacancy Offer'),
        ),
        migrations.AddField(
            model_name='carrierlist',
            name='reply_message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_carrier_lists', to='sms_interface.SMSMessage', verbose_name='Reply SMS Message'),
        ),
        migrations.AddField(
            model_name='carrierlist',
            name='sent_message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_carrier_lists', to='sms_interface.SMSMessage', verbose_name='Sent SMS Message'),
        ),
        migrations.AddField(
            model_name='carrierlist',
            name='vacancy_offer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carrier_lists', to='hr.VacancyOffer', verbose_name='Vacancy Offer'),
        ),
        migrations.AddField(
            model_name='candidateevaluation',
            name='reference_timesheet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidate_evaluations', to='hr.TimeSheet', verbose_name='Reference TimeSheet'),
        ),
        migrations.AddField(
            model_name='candidateevaluation',
            name='supervisor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='supervised_candidate_evaluations', to='core.CompanyContact', verbose_name='Supervisor'),
        ),
        migrations.AddField(
            model_name='blacklist',
            name='jobsite',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='blacklists', to='hr.Jobsite', verbose_name='Jobsite'),
        ),
        migrations.AddField(
            model_name='blacklist',
            name='timesheet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='blacklists', to='hr.TimeSheet', verbose_name='Timesheet'),
        ),
        migrations.AlterUniqueTogether(
            name='vacancy',
            unique_together=set([('work_start_date', 'position', 'jobsite')]),
        ),
        migrations.AlterUniqueTogether(
            name='timesheet',
            unique_together=set([('vacancy_offer', 'shift_started_at')]),
        ),
        migrations.AlterUniqueTogether(
            name='favouritelist',
            unique_together=set([('company_contact', 'candidate_contact', 'company', 'jobsite', 'vacancy')]),
        ),
        migrations.AlterUniqueTogether(
            name='contactjobsitedistancecache',
            unique_together=set([('contact', 'jobsite')]),
        ),
        migrations.AlterUniqueTogether(
            name='carrierlist',
            unique_together=set([('candidate_contact', 'target_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='blacklist',
            unique_together=set([('company', 'company_contact', 'candidate_contact', 'timesheet', 'jobsite')]),
        ),
    ]
