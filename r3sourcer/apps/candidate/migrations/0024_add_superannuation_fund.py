# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-12 14:04
from __future__ import unicode_literals

from datetime import datetime

from django.db import migrations, models
import django.db.models.deletion
import requests
import uuid


def fetch_superannuation_funds(apps, schema_editor):
    SuperannuationFund = apps.get_model('candidate', 'SuperannuationFund')

    file_url = 'http://superfundlookup.gov.au/Tools/DownloadUsiList?download=usi'
    response = requests.get(file_url, stream=True)

    if response.encoding is None:
        response.encoding = 'utf-8'

    lines = response.iter_lines(decode_unicode=True)

    # skip header and delimiter lines
    next(lines)
    next(lines)

    batch = []
    for line in lines:
        if not line:
            continue

        abn = line[0:12].strip()
        product_name = line[234:435].strip()
        usi = line[213:234].strip()

        try:
            defaults = {
                'abn': abn,
                'product_name': product_name,
                'name': line[12:213].strip(),
                'usi': usi,
                'contribution_restrictions': line[435:460].strip().lower() == 'y',
                'from_date': datetime.strptime(line[460:471].strip(), '%Y-%m-%d').date(),
                'to_date': datetime.strptime(line[471:].strip(), '%Y-%m-%d').date(),
            }
        except ValueError:
            continue

        superfund_exist = SuperannuationFund.objects.filter(
            abn=abn, product_name=product_name, usi=usi
        ).first()

        if superfund_exist is None:
            if len(batch) < 50:
                batch.append(SuperannuationFund(**defaults))
            else:
                SuperannuationFund.objects.bulk_create(batch)
                batch = []
        else:
            for key, value in defaults.items():
                setattr(superfund_exist, key, value)
            superfund_exist.save()

    if len(batch) > 0:
        SuperannuationFund.objects.bulk_create(batch)


def migrate_superannuation_fund(apps, schema_editor):
    SuperannuationFund = apps.get_model('candidate', 'SuperannuationFund')
    CandidateContact = apps.get_model('candidate', 'CandidateContact')

    for candidate in CandidateContact.objects.all():
        if not candidate.superannuation_fund:
            continue

        fund = SuperannuationFund.objects.filter(
            models.Q(name__iexact=candidate.superannuation_fund.name) |
            models.Q(product_name__iexact=candidate.superannuation_fund.name)
        ).first()

        if fund is None:
            fund = SuperannuationFund.objects.get(usi='FSF1332AU')

        candidate.superannuation_fund_rel = fund
        candidate.superannuation_membership_number = candidate.superannuation_fund.membership_number
        candidate.save(update_fields=['superannuation_fund_rel', 'superannuation_membership_number'])


class Migration(migrations.Migration):

    dependencies = [
        ('candidate', '0023_rename_superfund_candidate'),
    ]

    operations = [
        migrations.CreateModel(
            name='SuperannuationFund',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('abn', models.CharField(max_length=16, verbose_name='ABN')),
                ('usi', models.CharField(max_length=16, verbose_name='USI')),
                ('product_name', models.CharField(max_length=255, verbose_name='Product Name')),
                ('contribution_restrictions', models.BooleanField(verbose_name='Contribution Restrictions')),
                ('from_date', models.DateField(verbose_name='From Date')),
                ('to_date', models.DateField(verbose_name='To Date')),
            ],
            options={
                'verbose_name_plural': 'Superannuation Funds',
                'verbose_name': 'Superannuation Fund',
            },
        ),
        migrations.AddField(
            model_name='candidatecontact',
            name='superannuation_fund_rel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidates', to='candidate.SuperannuationFund', verbose_name='Superannuation Fund'),
        ),
        migrations.AddField(
            model_name='candidatecontact',
            name='superannuation_membership_number',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Employee Membership Number'),
        ),
        migrations.RunPython(fetch_superannuation_funds, migrations.RunPython.noop),
        migrations.RunPython(migrate_superannuation_fund, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='candidatecontact',
            name='superannuation_fund',
        ),
        migrations.DeleteModel(
            name='SuperannuationFundCandidate'
        ),
    ]
