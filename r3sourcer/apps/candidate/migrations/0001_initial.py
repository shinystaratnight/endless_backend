# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-11-03 07:30
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import r3sourcer.apps.candidate.models
import r3sourcer.apps.core.mixins
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('skills', '0001_initial'),
        ('acceptance_tests', '0001_initial'),
        ('core', '0002_auto_20171102_1757'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcceptanceTestQuestionRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('question_answered_at', models.DateTimeField(auto_now=True, verbose_name='Question Answered at')),
                ('acceptance_test_answer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='acceptance_test_question_rels', to='acceptance_tests.AcceptanceTestAnswer', verbose_name='Acceptance Test Answer')),
                ('acceptance_test_question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='acceptance_test_question_rels', to='acceptance_tests.AcceptanceTestQuestion', verbose_name='Acceptance Test Question')),
            ],
            options={
                'verbose_name': 'Acceptance Test Question Relation',
                'verbose_name_plural': 'Acceptance Test Question Relations',
            },
        ),
        migrations.CreateModel(
            name='AcceptanceTestRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('test_started_at', models.DateTimeField(auto_now_add=True, verbose_name='Test Started at')),
                ('test_finished_at', models.DateTimeField(auto_now=True, verbose_name='Test Finished at')),
                ('acceptance_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_acceptance_tests', to='acceptance_tests.AcceptanceTest', verbose_name='Acceptance Test')),
            ],
            options={
                'verbose_name': 'Acceptance Test Relation',
                'verbose_name_plural': 'Acceptance Test Relations',
            },
        ),
        migrations.CreateModel(
            name='CandidateContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('residency', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'Citizen'), (2, 'Permanent Resident'), (3, 'Temporary Resident')], default=0, verbose_name='Residency Status')),
                ('visa_expiry_date', models.DateField(blank=True, null=True, verbose_name='Visa Expiry Date')),
                ('vevo_checked_at', models.DateField(blank=True, null=True, verbose_name='VEVO checked at')),
                ('referral', models.PositiveSmallIntegerField(choices=[(0, 'Other / Unspecified'), (1, 'Direct Contact'), (2, 'Friend'), (3, 'Internet Search'), (4, 'RTO'), (5, 'Job Agent'), (6, 'Advertisement')], default=1, verbose_name='Referral Source')),
                ('tax_file_number', models.CharField(blank=True, max_length=9, verbose_name='Tax File Number')),
                ('super_annual_fund_name', models.CharField(blank=True, max_length=63, verbose_name='Super annual Fund Name')),
                ('super_member_number', models.CharField(blank=True, max_length=63, verbose_name='Super Member Number')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Weight, kg')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Height, cm')),
                ('strength', models.PositiveSmallIntegerField(default=0, verbose_name='Strength')),
                ('language', models.PositiveSmallIntegerField(default=0, verbose_name='Language')),
                ('transportation_to_work', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Own Car'), (2, 'Public Transportation')], null=True, verbose_name='Transportation to Work')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=63, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, verbose_name='Emergency Contact Phone Number')),
                ('reliability_score', models.PositiveSmallIntegerField(default=0, verbose_name='Reliability Score')),
                ('loyalty_score', models.PositiveSmallIntegerField(default=0, verbose_name='Loyalty Score')),
                ('total_score', models.PositiveSmallIntegerField(default=0, verbose_name='Total Score')),
                ('autoreceives_sms', models.BooleanField(default=True, verbose_name='Autoreceives SMS')),
                ('bank_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidates', to='core.BankAccount', verbose_name='Bank Account')),
                ('contact', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_contacts', to='core.Contact', verbose_name='Contact')),
                ('employment_classification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidates', to='skills.EmploymentClassification', verbose_name='Employment Classification')),
                ('nationality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidate_contacts', to='core.Country', to_field='code2')),
            ],
            options={
                'verbose_name': 'Candidate Contact',
                'verbose_name_plural': 'Candidate Contacts',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CandidateRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_rels', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
                ('company_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_rels', to='core.CompanyContact', verbose_name='Company Contact')),
            ],
            options={
                'verbose_name': 'Candidate Relationship',
                'verbose_name_plural': 'Candidate Relationships',
            },
        ),
        migrations.CreateModel(
            name='InterviewSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('target_date_and_time', models.DateTimeField(verbose_name='Target date')),
                ('category', models.CharField(blank=True, choices=[('first_phone_interview', 'First Phone Interview'), ('second_phone_interview', 'Second Phone Interview'), ('live_interview', 'Live interview')], max_length=15, null=True, verbose_name='Category')),
                ('accepted', models.BooleanField(default=False, verbose_name='Accepted')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='interview_schedules', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
                ('company_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='interview_schedules', to='core.CompanyContact', verbose_name='Company Contact')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkillRateRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('valid_from', models.DateField(verbose_name='Valid From')),
                ('valid_until', models.DateField(verbose_name='Valid Until')),
            ],
            options={
                'verbose_name': 'Candidate Skill Rate',
                'verbose_name_plural': 'Candidate Skill Rates',
            },
        ),
        migrations.CreateModel(
            name='SkillRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('score', models.PositiveSmallIntegerField(default=0, verbose_name='Score')),
                ('prior_experience', models.DurationField(choices=[(datetime.timedelta(0), 'Inexperienced'), (datetime.timedelta(30), '1 Month'), (datetime.timedelta(90), '3 Months'), (datetime.timedelta(180), '6 Months'), (datetime.timedelta(365), '1 Year'), (datetime.timedelta(730), '2 Years'), (datetime.timedelta(1095), '3 Years'), (datetime.timedelta(1825), '5 Years or more')], default=datetime.timedelta(0), verbose_name='Prior Experience')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_skills', to='candidate.CandidateContact')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_skills', to='skills.Skill', verbose_name='Skill')),
            ],
            options={
                'verbose_name': 'Candidate Skill',
                'verbose_name_plural': 'Candidate Skills',
            },
        ),
        migrations.CreateModel(
            name='Subcontractor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('subcontractor_type', models.PositiveSmallIntegerField(choices=[(10, 'sole_trader'), (20, 'company')], default=10, verbose_name='Subcontractor Type')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='core.Company')),
                ('allowance_enabled', models.BooleanField(default=False, verbose_name='Allowance Enabled')),
                ('penalty_rates_enabled', models.BooleanField(default=False, verbose_name='Penalty Rates Enabled')),
                ('primary_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='candidate.CandidateContact', verbose_name='Candidate Contact')),
            ],
            options={
                'verbose_name': 'Subcontractor',
                'verbose_name_plural': 'Subcontactors',
            },
        ),
        migrations.CreateModel(
            name='SuperannuationFund',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=76, verbose_name='Name')),
                ('membership_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Employer Membership Number')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, verbose_name='Phone Number')),
                ('website', models.CharField(blank=True, max_length=255, null=True, verbose_name='Website')),
            ],
            options={
                'verbose_name': 'Superannuation Fund',
                'verbose_name_plural': 'Superannuation Funds',
            },
        ),
        migrations.CreateModel(
            name='TagRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('verification_evidence', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.candidate.models.TagRel.verification_evidence_path, verbose_name='Verification Evidence')),
                ('candidate_contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tag_rels', to='candidate.CandidateContact', verbose_name='Candidate Contact')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tag_rels', to='core.Tag', verbose_name='Tag')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='verified_tag_rels', to='core.CompanyContact', verbose_name='Verified By')),
            ],
            options={
                'verbose_name': 'Tag Relationship',
                'verbose_name_plural': 'Tag Relationships',
            },
        ),
        migrations.CreateModel(
            name='VisaType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('subclass', models.CharField(max_length=4, unique=True, verbose_name='Subclass Number')),
                ('name', models.CharField(max_length=255, verbose_name='Visa Type Name')),
                ('general_type', models.CharField(choices=[('visitor', 'Visitor'), ('working', 'Working and Skilled'), ('studying', 'Studying'), ('family', 'Family and Spousal'), ('refugee', 'Refugee and Humanitarian'), ('other', 'Other'), ('repealed', 'Repealed'), ('temp', 'Temporary'), ('temp_resid', 'Temporary Resident'), ('bridging', 'Bridging Visa')], default='other', max_length=10, verbose_name='General Visa Type')),
                ('work_hours_allowed', models.PositiveSmallIntegerField(default=0, verbose_name='Working Hours Allowed')),
                ('is_available', models.BooleanField(default=True, verbose_name='Available')),
            ],
            options={
                'verbose_name': 'Visa Type',
                'verbose_name_plural': 'Visa Types',
            },
        ),
        migrations.AddField(
            model_name='skillraterel',
            name='candidate_skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_skill_rates', to='candidate.SkillRel', verbose_name='Candidate Skill'),
        ),
        migrations.AddField(
            model_name='skillraterel',
            name='hourly_rate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_skill_rates', to='skills.SkillBaseRate', verbose_name='Hourly Rate'),
        ),
        migrations.AddField(
            model_name='candidaterel',
            name='master_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_rels', to='core.Company', verbose_name='Master Company'),
        ),
        migrations.AddField(
            model_name='candidatecontact',
            name='superannuation_fund',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidates', to='candidate.SuperannuationFund', verbose_name='Superannuation Fund'),
        ),
        migrations.AddField(
            model_name='candidatecontact',
            name='visa_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidate_contacts', to='candidate.VisaType', verbose_name='Visa Type'),
        ),
        migrations.AddField(
            model_name='acceptancetestrel',
            name='candidate_contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='candidate_acceptance_tests', to='candidate.CandidateContact', verbose_name='Candidate Contact'),
        ),
        migrations.AddField(
            model_name='acceptancetestquestionrel',
            name='candidate_acceptance_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceptance_test_question_rels', to='candidate.AcceptanceTestRel', verbose_name='Acceptance Test Relation'),
        ),
        migrations.AlterUniqueTogether(
            name='tagrel',
            unique_together=set([('tag', 'candidate_contact')]),
        ),
        migrations.AlterUniqueTogether(
            name='skillrel',
            unique_together=set([('skill', 'candidate_contact')]),
        ),
    ]
