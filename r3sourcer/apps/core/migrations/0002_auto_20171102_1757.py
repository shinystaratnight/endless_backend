# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-11-02 15:57
from __future__ import unicode_literals

import autoslug.fields
import cities_light.abstract_models
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import easy_thumbnails.fields
import mptt.fields
import phonenumber_field.modelfields
import r3sourcer.apps.core.mixins
import r3sourcer.apps.core.models.core
import r3sourcer.apps.core.utils.validators
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
        ('filer', '0007_auto_20161016_1055'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('street_address', models.CharField(max_length=126, verbose_name='Street Address')),
                ('postal_code', models.CharField(blank=True, max_length=11, verbose_name='Postal Code')),
                ('latitude', models.DecimalField(decimal_places=6, default=0, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, default=0, max_digits=9)),
                ('phone_landline', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, verbose_name='Landline Phone')),
                ('phone_fax', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, verbose_name='Fax')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('bank_name', models.CharField(max_length=63, verbose_name='Bank Name')),
                ('bank_account_name', models.CharField(max_length=63, verbose_name='Bank Account Name')),
                ('bsb', models.CharField(max_length=6, verbose_name='BSB')),
                ('account_number', models.CharField(max_length=10, verbose_name='Account Number')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('display_name', models.CharField(max_length=200)),
                ('search_names', cities_light.abstract_models.ToSearchTextField(blank=True, db_index=True, default='', max_length=4000)),
                ('latitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
                ('population', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('feature_code', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=127, unique=True, verbose_name='Company Name')),
                ('business_id', models.CharField(blank=True, max_length=31, null=True, verbose_name='Business Number')),
                ('registered_for_gst', models.BooleanField(default=False, verbose_name='Registered for GST')),
                ('tax_number', models.CharField(blank=True, max_length=31, null=True, verbose_name='Tax Number')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('date_of_incorporation', models.DateField(blank=True, null=True, verbose_name='Date of Incorporation')),
                ('description', models.TextField(blank=True, verbose_name='Public description')),
                ('notes', models.TextField(blank=True, help_text='Visible for anyone with access', verbose_name='Notes')),
                ('credit_check', models.BooleanField(choices=[(True, 'Approved'), (False, 'Not Approved')], default=False, verbose_name='Credit Check')),
                ('credit_check_date', models.DateField(blank=True, null=True, verbose_name='Credit Check Approval Date')),
                ('approved_credit_limit', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Approved Credit Limit')),
                ('terms_of_payment', models.CharField(choices=[('prepaid', 'Prepaid'), ('on_delivery', 'Cash on delivery'), ('days', 'Days'), ('day_of_month', 'Day of the month'), ('days_eom', 'Days after EOM'), ('day_of_month_eom', 'Day of month after EOM')], default='on_delivery', max_length=20, verbose_name='Terms of Payment')),
                ('payment_due_date', models.PositiveSmallIntegerField(default=0, help_text='Or set the day of the month within which the payment must be made to pay', verbose_name='Number of days to pay')),
                ('available', models.BooleanField(default=True, verbose_name='Available')),
                ('billing_email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Billing E-mail')),
                ('credit_check_proof', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.Company.clients_credit_path, verbose_name='Credit Check Proof')),
                ('type', models.CharField(choices=[('master', 'Master'), ('regular', 'Regular')], default='regular', max_length=20, verbose_name='Company type')),
                ('company_rating', models.CharField(choices=[('aa', 'AA'), ('ab', 'AB'), ('ba', 'BA'), ('bb', 'BB')], default='aa', max_length=2, verbose_name='Company rating')),
                ('timesheet_approval_scheme', models.CharField(choices=[('PIN', 'PIN'), ('SIGNATURE', 'Signature')], default='PIN', max_length=16, verbose_name='TimeSheet approval scheme')),
                ('expense_account', models.CharField(default='4-1000', max_length=6, verbose_name='MYOB Expense Account')),
                ('bank_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companies', to='core.BankAccount', verbose_name='Bank Account')),
                ('files', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='filer.Folder')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
            bases=(r3sourcer.apps.core.mixins.CategoryFolderMixin, models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(blank=True, max_length=63, verbose_name='Name')),
                ('hq', models.BooleanField(default=False, verbose_name='HQ')),
                ('termination_date', models.DateField(blank=True, null=True, verbose_name='Termination date')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_addresses', to='core.Address', verbose_name='Address')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_addresses', to='core.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Company Address',
                'verbose_name_plural': 'Company Addresses',
            },
            bases=(models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('job_title', models.CharField(blank=True, max_length=31, verbose_name='Job title')),
                ('rating_unreliable', models.BooleanField(default=False, help_text='Mark when rates Candidates badly but wants them again on the jobsite', verbose_name='Ratings Unreliable')),
                ('receive_order_confirmation_sms', models.BooleanField(default=True, verbose_name='Receive order confirmation sms')),
                ('legacy_myob_card_number', models.CharField(blank=True, max_length=15, verbose_name='Legacy MYOB card number')),
                ('voip_username', models.CharField(blank=True, help_text='Phone Extension', max_length=15, verbose_name='VoIP Username')),
                ('voip_password', models.CharField(blank=True, max_length=15, verbose_name='VoIP Password')),
                ('primary_contact_approved_at', models.DateTimeField(editable=False, null=True, verbose_name='Primary Contact approved at')),
                ('staff_approved_at', models.DateTimeField(editable=False, null=True, verbose_name='Staff approved at')),
                ('pin_code', models.CharField(blank=True, default='', max_length=16, validators=[r3sourcer.apps.core.utils.validators.string_is_numeric, django.core.validators.MinLengthValidator(4)], verbose_name='PIN')),
                ('role', models.CharField(choices=[('manager', 'Manager'), ('client', 'Client')], default='manager', max_length=63, verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Company Contact',
                'verbose_name_plural': 'Company Contacts',
            },
            bases=(models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyContactAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('termination_date', models.DateField(blank=True, null=True, verbose_name='Termination date')),
                ('company_address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_contacts', to='core.CompanyAddress', verbose_name='Company Address')),
                ('company_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_addresses', to='core.CompanyContact', verbose_name='Company Contact')),
            ],
            options={
                'verbose_name': 'Company Contact Address',
                'verbose_name_plural': 'Company Contact Addresses',
            },
            bases=(models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyContactRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('termination_date', models.DateField(blank=True, null=True, verbose_name='Termination date')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relationships', to='core.Company', verbose_name='Company')),
                ('company_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='relationships', to='core.CompanyContact', verbose_name='Company Contact')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, r3sourcer.apps.core.mixins.CompanyLookupMixin, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyLocalization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('field_name', models.CharField(max_length=64, verbose_name='Company field name')),
                ('verbose_value', models.CharField(blank=True, max_length=128, null=True, verbose_name='Company field verbose name')),
                ('help_text', models.CharField(blank=True, max_length=512, null=True, verbose_name='Company field help text')),
                ('active', models.BooleanField(default=True, verbose_name='Company field is active')),
            ],
            options={
                'verbose_name': 'Company Localization',
                'verbose_name_plural': 'Company Localizations',
            },
        ),
        migrations.CreateModel(
            name='CompanyRel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('master_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='master_companies', to='core.Company', verbose_name='Master company')),
                ('primary_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_accounts', to='core.CompanyContact', verbose_name='Primary Contact')),
                ('regular_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='regular_companies', to='core.Company', verbose_name='Regular company')),
            ],
            options={
                'verbose_name': 'Company Relationship',
                'verbose_name_plural': 'Company Relationships',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='CompanyTradeReference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('trade_reference', models.TextField(verbose_name='Trade Reference')),
                ('referral_company_name', models.CharField(max_length=255, verbose_name='Company Name')),
                ('referral_person_name', models.CharField(max_length=255, verbose_name='Title, First and Last Name')),
                ('referral_email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('referral_phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, verbose_name='Phone')),
                ('email_auth_code', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='E-mail authentication string')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_trade_references', to='core.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Company Trade Reference',
                'verbose_name_plural': 'Company Trade References',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('title', models.CharField(blank=True, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.')], max_length=7, null=True, verbose_name='Title')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='E-mail')),
                ('phone_mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, unique=True, verbose_name='Mobile Phone')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=7, null=True, verbose_name='Gender')),
                ('marital_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widow', 'Widow')], max_length=15, null=True, verbose_name='Marital Status')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('spouse_name', models.CharField(blank=True, max_length=63, verbose_name='Spouse/Partner name')),
                ('children', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Children')),
                ('is_available', models.BooleanField(default=True, verbose_name='Available')),
                ('picture', easy_thumbnails.fields.ThumbnailerImageField(blank=True, default='/home/user/projects/python/r3sourcer/r3_endless_project/var/www/media/contact_pictures/default_picture.jpg', max_length=255, upload_to='contact_pictures')),
                ('phone_mobile_verified', models.BooleanField(default=False, verbose_name='Mobile Phone Verified')),
                ('email_verified', models.BooleanField(default=False, verbose_name='E-mail Verified')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='core.Address', verbose_name='Address')),
                ('files', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='filer.Folder')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
            bases=(r3sourcer.apps.core.mixins.CategoryFolderMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ContactUnavailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('unavailable_from', models.DateField(blank=True, null=True, verbose_name='From')),
                ('unavailable_until', models.DateField(blank=True, null=True, verbose_name='Until')),
                ('notes', models.TextField(blank=True, help_text='Unavailability Description', verbose_name='Notes')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_unavailabilities', to='core.Contact', verbose_name='Contact')),
            ],
            options={
                'verbose_name': 'Contact Unavailability',
                'verbose_name_plural': 'Contact Unavailabilities',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code2', models.CharField(blank=True, max_length=2, null=True, unique=True)),
                ('code3', models.CharField(blank=True, max_length=3, null=True, unique=True)),
                ('continent', models.CharField(choices=[('OC', 'Oceania'), ('EU', 'Europe'), ('AF', 'Africa'), ('NA', 'North America'), ('AN', 'Antarctica'), ('SA', 'South America'), ('AS', 'Asia')], db_index=True, max_length=2)),
                ('tld', models.CharField(blank=True, db_index=True, max_length=5)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('currency', djmoney.models.fields.CurrencyField(choices=[('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('BBD', 'Barbados Dollar'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man pount'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('LKR', 'Sri Lanka Rupee'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('UGX', 'Uganda Shilling'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', max_length=3)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='CurrencyExchangeRates',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('from_currency', djmoney.models.fields.CurrencyField(choices=[('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('BBD', 'Barbados Dollar'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man pount'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('LKR', 'Sri Lanka Rupee'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('UGX', 'Uganda Shilling'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', max_length=3, verbose_name='From currency')),
                ('to_currency', djmoney.models.fields.CurrencyField(choices=[('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('BBD', 'Barbados Dollar'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man pount'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('LKR', 'Sri Lanka Rupee'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('UGX', 'Uganda Shilling'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', max_length=3, verbose_name='To currency')),
                ('exchange_rate', models.DecimalField(decimal_places=12, default=1, max_digits=18, verbose_name='Exchange rate')),
            ],
            options={
                'verbose_name': 'Currency Exchange Rate',
                'verbose_name_plural': 'Currency Exchange Rates',
            },
        ),
        migrations.CreateModel(
            name='DashboardModule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('content_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.ContentType', verbose_name='Model')),
            ],
            options={
                'verbose_name_plural': 'Dashboard modules',
                'verbose_name': 'Dashboard module',
                'permissions': (('can_use_module', 'Can use this module'),),
            },
        ),
        migrations.CreateModel(
            name='ExtranetNavigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=63, verbose_name='Menu Title')),
                ('url', models.CharField(max_length=63, verbose_name='Default Url')),
                ('endpoint', models.CharField(max_length=63, verbose_name='DRF Endpoint')),
                ('access_level', models.CharField(choices=[('client', 'Client'), ('manager', 'Manager'), ('candidate', 'Candidate')], default='manager', max_length=63, verbose_name='Acess Level')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.ExtranetNavigation')),
            ],
            options={
                'verbose_name': 'Extranet Navigation',
                'verbose_name_plural': 'Extranet Navigations',
            },
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('owner_id', models.UUIDField()),
                ('content', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.FileStorage.content_path, verbose_name='Content')),
                ('owner_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'File Storage',
                'verbose_name_plural': 'File Storage',
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('title', models.CharField(default='', max_length=1024, verbose_name='Title')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
                ('short_description', models.TextField(blank=True, default='', verbose_name='Short description')),
                ('save_button_text', models.CharField(default='Save', max_length=512, verbose_name='Button text')),
                ('submit_message', models.TextField(default='', help_text='Would be used for display user message after saving', verbose_name='Result message')),
            ],
            options={
                'verbose_name': 'Form',
                'verbose_name_plural': 'Forms',
            },
        ),
        migrations.CreateModel(
            name='FormBuilder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('content_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Content type for form')),
            ],
            options={
                'verbose_name': 'Form builder',
                'verbose_name_plural': 'Form builders',
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(default='', verbose_name='Name')),
                ('label', models.CharField(blank=True, default='', max_length=512, verbose_name='Label')),
                ('placeholder', models.CharField(blank=True, default='', max_length=512, verbose_name='Placeholder')),
                ('class_name', models.CharField(blank=True, default='form-control', max_length=64, verbose_name='Class name')),
                ('required', models.BooleanField(default=True, verbose_name='Required')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position')),
                ('help_text', models.CharField(blank=True, default='', max_length=512, verbose_name='Help text')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormFieldGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(default='', max_length=512, verbose_name='Group name')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='core.Form', verbose_name='Form')),
            ],
            options={
                'ordering': ['position'],
                'verbose_name': 'Form fields group',
                'verbose_name_plural': 'Form fields groups',
            },
        ),
        migrations.CreateModel(
            name='FormStorage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default={}, verbose_name='Form data')),
                ('object_id', models.CharField(blank=True, default='', editable=False, max_length=128, verbose_name='Object id')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Form', verbose_name='Form')),
            ],
            options={
                'verbose_name': 'Form storage',
                'verbose_name_plural': 'Forms storage',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('customer_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.customer_signature_path, verbose_name='Customer signature')),
                ('provider_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.provider_signature_path, verbose_name='Provider signature')),
                ('customer_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Customer signed at')),
                ('provider_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Provider signed at')),
                ('total_with_tax', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Total with GST')),
                ('total', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Total')),
                ('tax', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='GST')),
                ('currency', djmoney.models.fields.CurrencyField(choices=[('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('BBD', 'Barbados Dollar'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man pount'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('LKR', 'Sri Lanka Rupee'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('UGX', 'Uganda Shilling'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', max_length=3, verbose_name='Currency')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is paid')),
                ('paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Paid sum')),
                ('paid_at', models.DateField(editable=False, null=True, verbose_name='Paid at')),
                ('myob_number', models.CharField(max_length=8, null=True, blank=True, verbose_name='MYOB Number')),
                ('date', models.DateField(auto_now_add=True, null=True, verbose_name='Creation date')),
                ('number', models.CharField(max_length=20, null=True, verbose_name='Number')),
                ('order_number', models.CharField(max_length=255, null=True, verbose_name='Order Number')),
                ('customer_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_invoices', to='core.Company', verbose_name='Customer Company')),
                ('customer_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_representative_invoices', to='core.CompanyContact', verbose_name='Customer Representative')),
                ('provider_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='provider_invoices', to='core.Company', verbose_name='Provider Company')),
                ('provider_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='provider_representative_invoices', to='core.CompanyContact', verbose_name='Provider Representative')),
            ],
            options={
                'verbose_name': 'Company Invoice',
                'verbose_name_plural': 'Company Invoices',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('date', models.DateField(verbose_name='Date')),
                ('units', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Units')),
                ('notes', models.TextField(verbose_name='Notes')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Rate')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Amount')),
                ('unit_type', models.CharField(choices=[('unit', 'Unit')], default='unit', max_length=10)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoice_lines', to='core.Invoice', verbose_name='Invoice')),
            ],
            options={
                'verbose_name': 'Invoice Line',
                'verbose_name_plural': 'Invoice Lines',
            },
        ),
        migrations.CreateModel(
            name='InvoiceRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('period', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly'), ('monthly', 'Monthly'), ('daily', 'Daily'), ('prepay', 'Prepay')], default='weekly', max_length=11, verbose_name='Period')),
                ('period_zero_reference', models.IntegerField(default=1, verbose_name='Period zero reference')),
                ('starting_number', models.IntegerField(default=1, verbose_name='Starting number')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('serial_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Serial number')),
                ('notice', models.TextField(blank=True, null=True, verbose_name='Notice')),
                ('separation_rule', models.CharField(choices=[('one_invoce', 'One invoce'), ('per_jobsite', 'Per jobsite'), ('per_candidate', 'Per candidate')], default='one_invoce', max_length=13, verbose_name='Separation rule')),
                ('show_candidate_name', models.BooleanField(default=False, verbose_name='Show Candidate Name')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoice_rules', to='core.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Invoice Rule',
                'verbose_name_plural': 'Invoice Rules',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('object_id', models.UUIDField(verbose_name='Object id')),
                ('note', models.TextField(blank=True, verbose_name='Notes')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Content type')),
            ],
            options={
                'verbose_name': 'Contact Note',
                'verbose_name_plural': 'Contact Notes',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('customer_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.customer_signature_path, verbose_name='Customer signature')),
                ('provider_signature', models.FileField(blank=True, null=True, upload_to=r3sourcer.apps.core.models.core.AbstractBaseOrder.provider_signature_path, verbose_name='Provider signature')),
                ('customer_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Customer signed at')),
                ('provider_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='Provider signed at')),
                ('total_with_tax', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Total with GST')),
                ('total', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Total')),
                ('tax', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='GST')),
                ('currency', djmoney.models.fields.CurrencyField(choices=[('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('BBD', 'Barbados Dollar'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man pount'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('LKR', 'Sri Lanka Rupee'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('UGX', 'Uganda Shilling'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', max_length=3, verbose_name='Currency')),
                ('customer_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_orders', to='core.Company', verbose_name='Customer Company')),
                ('customer_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_representative_orders', to='core.CompanyContact', verbose_name='Customer Representative')),
                ('provider_company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='provider_orders', to='core.Company', verbose_name='Provider Company')),
                ('provider_representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='provider_representative_orders', to='core.CompanyContact', verbose_name='Provider Representative')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
            },
            bases=(r3sourcer.apps.core.mixins.CompanyLookupMixin, models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='OrderLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('date', models.DateField(verbose_name='Date')),
                ('units', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Units')),
                ('notes', models.TextField(verbose_name='Notes')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Rate')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Amount')),
                ('unit_type', models.CharField(choices=[('unit', 'Unit')], default='unit', max_length=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_lines', to='core.Order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Order Line',
                'verbose_name_plural': 'Order Lines',
            },
        ),
        migrations.CreateModel(
            name='PublicHoliday',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('date', models.DateField(verbose_name='Date')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country', verbose_name='Country')),
            ],
            options={
                'ordering': ['country', 'date'],
                'verbose_name': 'Public holiday',
                'verbose_name_plural': 'Public holidays',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('display_name', models.CharField(max_length=200)),
                ('geoname_code', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country')),
            ],
            options={
                'verbose_name': 'State/District',
                'verbose_name_plural': 'States/Districts',
            },
        ),
        migrations.CreateModel(
            name='SiteCompany',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='site_companies', to='core.Company', verbose_name='Company')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='site_companies', to='sites.Site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'Site/Company relationship',
                'verbose_name_plural': 'Site/Company relationships',
            },
            bases=(models.Model, r3sourcer.apps.core.mixins.MasterCompanyLookupMixin),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=63, verbose_name='Tag Name')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('evidence_required_for_approval', models.BooleanField(default=False, verbose_name='Evidence required for approval')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.Tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserDashboardModule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('position', models.PositiveIntegerField(help_text='would be used for ordering', verbose_name='position')),
                ('ui_config', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, verbose_name='UI config')),
                ('company_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_modules', to='core.CompanyContact', verbose_name='Company contact')),
                ('dashboard_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_modules', to='core.DashboardModule', verbose_name='Dashboard module')),
            ],
            options={
                'ordering': ['company_contact', '-position'],
                'verbose_name': 'User dashboard module',
                'verbose_name_plural': 'User dashboard modules',
            },
        ),
        migrations.CreateModel(
            name='VAT',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=16, verbose_name='Rate')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('country', models.ForeignKey(default='AU', on_delete=django.db.models.deletion.CASCADE, to='core.Country', to_field='code2')),
            ],
            options={
                'verbose_name': 'VAT',
                'verbose_name_plural': 'VATs',
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Binding model')),
            ],
            options={
                'verbose_name': 'Workflow',
                'verbose_name_plural': 'Workflows',
            },
        ),
        migrations.CreateModel(
            name='WorkflowNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('number', models.PositiveSmallIntegerField(verbose_name='State number')),
                ('name_before_activation', models.CharField(max_length=128, verbose_name='State name before activation')),
                ('name_after_activation', models.CharField(blank=True, max_length=128, null=True, verbose_name='State name after activation')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('rules', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Rules')),
                ('hardlock', models.BooleanField(default=False, verbose_name='Hardlock')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_wf_nodes', to='core.Company', verbose_name='Company')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nodes', to='core.Workflow', verbose_name='Workflow')),
            ],
            options={
                'verbose_name': 'Workflow Node',
                'verbose_name_plural': 'Workflow Nodes',
            },
        ),
        migrations.CreateModel(
            name='WorkflowObject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('object_id', models.UUIDField(help_text='ID of Object belonging to model in Workflow', verbose_name='Object id')),
                ('comment', models.TextField(blank=True, help_text='State Change Comment', verbose_name='Comments')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('score', models.SmallIntegerField(default=0, verbose_name='State score')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='core.WorkflowNode', verbose_name='State')),
            ],
            options={
                'verbose_name': 'Workflow object',
                'verbose_name_plural': 'Workflow objects',
            },
        ),
        migrations.CreateModel(
            name='CheckBoxFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
            ],
            options={
                'verbose_name': 'Checkbox field',
                'verbose_name_plural': 'Checkbox fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='DateFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
            ],
            options={
                'verbose_name': 'Date field',
                'verbose_name_plural': 'Date fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='FileFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
            ],
            options={
                'verbose_name': 'File field',
                'verbose_name_plural': 'File fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='ImageFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
            ],
            options={
                'verbose_name': 'Image field',
                'verbose_name_plural': 'Image fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='ModelFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
            ],
            options={
                'verbose_name': 'Model field',
                'verbose_name_plural': 'Model fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='NumberFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
                ('min_value', models.FloatField(default=None, null=True, verbose_name='Min value')),
                ('max_value', models.FloatField(default=None, null=True, verbose_name='Max value')),
                ('step', models.FloatField(default=1, verbose_name='Step')),
            ],
            options={
                'verbose_name': 'Number field',
                'verbose_name_plural': 'Number fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='RadioButtonsFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
                ('choices', django.contrib.postgres.fields.jsonb.JSONField(default=[], verbose_name='choices')),
            ],
            options={
                'verbose_name': 'Radio button field',
                'verbose_name_plural': 'Radio button fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='SelectFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
                ('is_multiple', models.BooleanField(default=False, verbose_name=' Allow Multiple Selections')),
                ('choices', django.contrib.postgres.fields.jsonb.JSONField(default=[], verbose_name='Choices')),
            ],
            options={
                'verbose_name': 'Select field',
                'verbose_name_plural': 'Select fields',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='TextAreaFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
                ('max_length', models.PositiveIntegerField(verbose_name='Max length')),
                ('rows', models.PositiveIntegerField(verbose_name='Rows')),
            ],
            options={
                'verbose_name': 'TextArea field',
                'verbose_name_plural': 'TextArea field',
            },
            bases=('core.formfield',),
        ),
        migrations.CreateModel(
            name='TextFormField',
            fields=[
                ('formfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.FormField')),
                ('max_length', models.PositiveIntegerField(default=None, null=True, verbose_name='Max length')),
                ('subtype', models.CharField(choices=[('text', 'Text'), ('password', 'Password'), ('email', 'Email'), ('tel', 'Phone')], default='text', max_length=16, verbose_name='Subtype')),
            ],
            options={
                'verbose_name': 'Text field',
                'verbose_name_plural': 'Text field',
            },
            bases=('core.formfield',),
        ),
        migrations.AddField(
            model_name='orderline',
            name='vat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.VAT', verbose_name='VAT'),
        ),
        migrations.AddField(
            model_name='invoiceline',
            name='vat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.VAT', verbose_name='VAT'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.FormFieldGroup', verbose_name='Form group'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.formfield_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='form',
            name='builder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='core.FormBuilder', verbose_name='Form builder'),
        ),
        migrations.AddField(
            model_name='form',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='core.Company', verbose_name='Company'),
        ),
        migrations.AlterUniqueTogether(
            name='currencyexchangerates',
            unique_together=set([('from_currency', 'to_currency')]),
        ),
        migrations.AddField(
            model_name='companylocalization',
            name='country',
            field=models.ForeignKey(blank=True, help_text='Country of localization. Empty value used for default variant', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Country', to_field='code2'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='approved_by_primary_contact',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='primary_approvals', to='core.Contact', verbose_name='Approved by primary contact'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='approved_by_staff',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='staff_approvals', to='core.Contact', verbose_name='Approved by staff'),
        ),
        migrations.AddField(
            model_name='companycontact',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='company_contact', to='core.Contact', verbose_name='Contact'),
        ),
        migrations.AddField(
            model_name='companyaddress',
            name='primary_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_primary_addresses', to='core.CompanyContact', verbose_name='Primary contact'),
        ),
        migrations.AddField(
            model_name='company',
            name='manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companies', to='core.CompanyContact', verbose_name='Manager'),
        ),
        migrations.AddField(
            model_name='company',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='core.Company', verbose_name='Parent Company'),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country'),
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Region'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bank_accounts', to='core.Contact', verbose_name='Contact'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.City'),
        ),
        migrations.AddField(
            model_name='address',
            name='country',
            field=models.ForeignKey(default='AU', on_delete=django.db.models.deletion.CASCADE, to='core.Country', to_field='code2'),
        ),
        migrations.AddField(
            model_name='address',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Region', verbose_name='State/District'),
        ),
        migrations.AlterUniqueTogether(
            name='workflownode',
            unique_together=set([('company', 'number', 'workflow')]),
        ),
        migrations.AlterUniqueTogether(
            name='userdashboardmodule',
            unique_together=set([('company_contact', 'dashboard_module')]),
        ),
        migrations.AlterUniqueTogether(
            name='sitecompany',
            unique_together=set([('site', 'company')]),
        ),
        migrations.AlterUniqueTogether(
            name='invoicerule',
            unique_together=set([('company', 'serial_number')]),
        ),
        migrations.AlterUniqueTogether(
            name='form',
            unique_together=set([('company', 'builder')]),
        ),
        migrations.AlterUniqueTogether(
            name='contact',
            unique_together=set([('first_name', 'last_name', 'email', 'phone_mobile')]),
        ),
        migrations.AlterUniqueTogether(
            name='companyrel',
            unique_together=set([('master_company', 'regular_company')]),
        ),
    ]
