# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2018-06-18 12:21
from __future__ import unicode_literals

from django.db import migrations, models

from r3sourcer.apps.core.models import Role, CompanyContact
from r3sourcer.apps.core_adapter.utils import api_reverse_lazy


def migrate_dashboard(apps, schema_editor):
    CompanyContact_model = apps.get_model("core", "CompanyContact")
    DashboardModule = apps.get_model("core", "DashboardModule")
    UserDashboardModule = apps.get_model("core", "UserDashboardModule")
    ContentType = apps.get_model("contenttypes", "ContentType")

    modules = [
        DashboardModule.objects.get_or_create(
            content_type=ContentType.objects.get(app_label='candidate', model='candidatecontact'),
            endpoint=api_reverse_lazy('candidate/candidatecontacts'),
            description='Open full list with candidates',
            add_label='+ Add new candidate',
        ),
        DashboardModule.objects.get_or_create(
            content_type=ContentType.objects.get(app_label='core', model='company'),
            endpoint=api_reverse_lazy('core/companies'),
            description='Open full list with clients',
            add_label='+ Add new client',
        ),
        DashboardModule.objects.get_or_create(
            content_type=ContentType.objects.get(app_label='core', model='companycontact'),
            endpoint=api_reverse_lazy('core/companycontacts'),
            description='Open full list with client contacts',
            add_label='+ Add new client contact',
        ),
        DashboardModule.objects.get_or_create(
            content_type=ContentType.objects.get(app_label='hr', model='job'),
            endpoint=api_reverse_lazy('hr/jobs'),
            description='Open full list with jobs',
            add_label='+ Add new job',
        )
    ]

    company_contacts = CompanyContact_model.objects.filter(
        models.Q(contact__user__role__name=Role.ROLE_NAMES.manager) | models.Q(role=CompanyContact.MANAGER),
    ).distinct()
    for company_contact in company_contacts:
        for i, module in enumerate(modules):
            is_exists = UserDashboardModule.objects.filter(
                company_contact__contact=company_contact.contact,
                dashboard_module=module[0]
            ).exists()
            if not is_exists:
                UserDashboardModule.objects.get_or_create(
                    company_contact=company_contact,
                    dashboard_module=module[0],
                    position=i,
                )


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0001_initial'),
        ('core', '0039_dashboard_add_fields'),
    ]

    operations = [
        migrations.RunPython(migrate_dashboard, migrations.RunPython.noop)
    ]
