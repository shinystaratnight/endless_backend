# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2021-10-13 08:24
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    def load_templates(apps, schema_editor):
        DefaultSMSTemplate = apps.get_model("sms_interface", "DefaultSMSTemplate")
        Language = apps.get_model("core", "Language")
        data = [{
            "name": "Carrier List Offer",
            "slug": "carrier-list-offer",
            "message_text_template": "Hello [[candidate_contact]]. Are you ready to do backup [[skill]] work for [[master_company]] from [[target_date_and_time]]? Reply YES to confirm the shift, we will send you Jobsite details later. Regards, [[recruitment_agent]], [[recruitment_agent__contact__phone_mobile]]",
            "reply_timeout": 180,
            "delivery_timeout": 10,
            "language": "en"
        }, {
            "name": "Carrier List Offer",
            "slug": "carrier-list-offer",
            "message_text_template": "Уважаемый [[candidate_contact]]. Сможете ли вы выйти в резерв для выполнения [[skill]] работы на [[master_company]] в [[target_date_and_time]]? Отправьте YES в ответном сообщении, чтобы согласиться. Мы отправим вам детали работы позже. С уважением, [[recruitment_agent]], [[recruitment_agent__contact__phone_mobile]]",
            "reply_timeout": 180,
            "delivery_timeout": 10,
            "language": "ru"
        }, {
            "name": "Carrier List Offer",
            "slug": "carrier-list-offer",
            "message_text_template": "Tere [[candidate_contact]]. Kas olete valmis [[master_company]] jaoks alates [[target_date_and_time]]-st olema varutöötaja [[oskus]] ametikohal? Vahetuse kinnitamiseks vastake YES. Saadame teile hiljem töökoha üksikasjad. Lugupidamisega [[recruitment_agent]], [[recruitment_agent__contact__phone_mobile]]",
            "reply_timeout": 180,
            "delivery_timeout": 10,
            "language": "et"
        }, {
            "name": "Carrier List Offer",
            "slug": "carrier-list-offer",
            "message_text_template": "Hei [[candidate_contact]]. Oletko valmis tekemään [[skill]] - varmuuskopiotyötä [[master_company]]-lle [[target_date_and_time]]? Vahvista muutos vastaamalla YES, lähetämme sinulle työpaikan tiedot myöhemmin. Terveisin [[recruitment_agent]], [[recruitment_agent__contact__phone_mobile]]",
            "reply_timeout": 180,
            "delivery_timeout": 10,
            "language": "fi"
        }]
        for template in data:
            lang = Language.objects.get(alpha_2=template['language'])
            try:
                DefaultSMSTemplate.objects.get(slug=template['slug'], language=lang)
            except DefaultSMSTemplate.DoesNotExist:
                DefaultSMSTemplate.objects.create(
                    name=template['name'],
                    slug=template['slug'],
                    message_text_template=template['message_text_template'],
                    reply_timeout=template['reply_timeout'],
                    delivery_timeout=template['delivery_timeout'],
                    language=lang
                )

    def propagate_default_templates(apps, schema_editor):
        DefaultSMSTemplate = apps.get_model("sms_interface", "DefaultSMSTemplate")
        SMSTemplate = apps.get_model("sms_interface", "SMSTemplate")
        Company = apps.get_model("core", "Company")
        default_templates = DefaultSMSTemplate.objects.filter(slug="carrier-list-offer")
        sms_templates = []
        for company in Company.objects.all():
            if company.type != 'master':
                continue

            for template in default_templates:
                try:
                    SMSTemplate.objects.get(slug=template.slug, company_id=company.id, language=template.language)
                except SMSTemplate.DoesNotExist:
                    obj = SMSTemplate(
                        name=template.name,
                        slug=template.slug,
                        message_text_template=template.message_text_template,
                        reply_timeout=template.reply_timeout,
                        delivery_timeout=template.delivery_timeout,
                        company_id=company.id,
                        language=template.language)
                    sms_templates.append(obj)
        SMSTemplate.objects.bulk_create(sms_templates)

    dependencies = [
        ('sms_interface', '0020_combine_template_slugs'),
    ]

    operations = [
        migrations.RunPython(load_templates),
        migrations.RunPython(propagate_default_templates),
    ]
